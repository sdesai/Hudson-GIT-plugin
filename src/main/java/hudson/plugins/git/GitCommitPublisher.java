package hudson.plugins.git;

import hudson.EnvVars;
import hudson.Extension;
import hudson.Launcher;
import hudson.FilePath.FileCallable;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.BuildListener;
import hudson.model.Result;
import hudson.plugins.git.util.BuildData;
import hudson.remoting.VirtualChannel;
import hudson.scm.SCM;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.BuildStepMonitor;
import hudson.tasks.Publisher;
import hudson.util.FormFieldValidator;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.List;

import javax.servlet.ServletException;

import net.sf.json.JSONObject;

import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.spearce.jgit.lib.ObjectId;
import org.spearce.jgit.transport.RemoteConfig;

public class GitCommitPublisher extends Publisher implements Serializable {

    private static final long serialVersionUID = 1L;

    @Override
    public boolean needsToRunAfterFinalized() {
        return true;
    }

    public BuildStepMonitor getRequiredMonitorService() {
        return BuildStepMonitor.BUILD;
    }

    @Override
    public boolean perform(final AbstractBuild<?, ?> build,
            Launcher launcher, final BuildListener listener)
            throws InterruptedException {

        final SCM scm = build.getProject().getScm();

        if (!(scm instanceof GitSCM)) {
            return false;
        }

        final String projectName = build.getProject().getName();
        final int buildNumber = build.getNumber();
        final Result buildResult = build.getResult();

        boolean canPerform;
        try {
        	
            canPerform = build.getWorkspace().act(
                    new FileCallable<Boolean>() {

                        private static final long serialVersionUID = 1L;

                        public Boolean invoke(File workspace, VirtualChannel channel) throws IOException {
                        	
                            GitSCM gitSCM = (GitSCM) scm;

                            EnvVars environment;
                            try {
                                environment = build.getEnvironment(listener);
                            } catch (IOException e) {
                                listener.error("IOException publishing in git plugin");
                                environment = new EnvVars();
                            } catch (InterruptedException e) {
                                listener.error("IOException publishing in git plugin");
                                environment = new EnvVars();
                            }

                            IGitAPI git = new GitAPI(gitSCM.getDescriptor().getGitExe(), build.getWorkspace(),listener, environment);

							// We delete the old tag generated by the SCM plugin
							String badTag = "hudson-" + projectName  + "-" + buildNumber;
							git.deleteTag(badTag);

							if (buildResult.isBetterOrEqualTo(Result.SUCCESS)) {

								String tag = projectName + "-" + buildNumber; 

								git.commit("-a", "-m", "Committing Integration Build: " + tag);
								git.tag(tag, "Integration Build: " + tag);
	
								RemoteConfig remote = gitSCM.getRepositories().get(0);
							
								listener.getLogger().println("Commiting changes and pushing result of build number " + tag + " to master branch of " + remote.getName() + " repository");

								List<ObjectId> revs = git.revList("--max-count=1", "HEAD");

								BuildData buildData = build.getAction(BuildData.class);

								if (!revs.isEmpty() && !revs.get(0).equals(buildData.lastBuild.revision.getSha1())) {
									buildData.lastBuild.revision.setSha1(revs.get(0));
								}

								git.push(remote, "HEAD:master");
							}

							return true;
                        }
                    });
        } catch (Throwable e) {
            listener.error("Failed to push tags to origin repository: " + e.getMessage());
            build.setResult(Result.FAILURE);
            return false;

        }
        return canPerform;
    }

    @Extension
    public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {

        public DescriptorImpl() {
            super(GitCommitPublisher.class);
        }

        public String getDisplayName() {
            return "Commit workspace updates and push to origin";
        }

        @Override
        public String getHelpFile() {
            return "/plugin/git/gitPublisher.html";
        }

        /**
         * Performs on-the-fly validation on the file mask wildcard.
         *
         * @param req request
         * @param rsp response
         * @throws IOException
         * @throws ServletException
         */
        public void doCheck(StaplerRequest req, StaplerResponse rsp)
                throws IOException, ServletException {
            new FormFieldValidator.WorkspaceFileMask(req, rsp).process();
        }

        @Override
        public GitCommitPublisher newInstance(StaplerRequest req, JSONObject formData)
                throws FormException {
            return new GitCommitPublisher();
        }

        public boolean isApplicable(Class<? extends AbstractProject> jobType) {
            return true;
        }
    }
}
